generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @unique
  username           String               @unique
  walletAddress      String               @unique
  email              String               @unique
  nonce              String
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  profile            Profile?
  posts              Post[]
  comments           Comment[]
  follows            Follow[]             @relation("Follows")
  followers          Follow[]             @relation("Followers")
  collections        Collection[]
  ownedNFTs          NFT[]                @relation("owner")
  createdNFTs        NFT[]                @relation("minter")
  hides              Hide[]
  likes              Like[]
  listings           Listing[]
  offers             Offer[]              @relation("seller")
  boughtOffers       Offer[]              @relation("buyer")
  sellerActivities   Activity[]           @relation("seller")
  buyerActivities    Activity[]           @relation("buyer")
  notifications      Notification[]
  sessions           Session[]
  reward             Reward[]
  sentMessages       Message[]            @relation("SentMessages")
  receivedMessages   Message[]            @relation("ReceivedMessages")
  EventParticipation EventParticipation[]
}

model Session {
  id        String   @id @unique
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Profile {
  id                String      @id @unique
  userId            String      @unique
  bio               String?
  avatarId          String?     @unique
  bannerId          String?
  twitter           String?
  discord           String?
  facebook          String?
  reddit            String?
  email             String?     @unique
  offerToken        OfferToken?
  minOfferThreshold String?
  updatedAt         DateTime    @updatedAt
  createdAt         DateTime    @default(now())
  user              User        @relation(fields: [userId], references: [id])
  avatar            Photo?      @relation("avatar", fields: [avatarId], references: [id])
}

model Photo {
  id               String      @id @unique
  url              String
  fileEntityId     String      @unique
  link             String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  file             FileEntity? @relation(fields: [fileEntityId], references: [id])
  profileAvatar    Profile?    @relation("avatar")
  collectionAvatar Collection? @relation("avatar")
  collectionBanner Collection? @relation("banner")
}

model Post {
  id        String    @id @unique
  userId    String
  content   String
  mediaUrl  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  comments  Comment[]
  likes     Like[]
}

model Like {
  id        String   @id @unique
  nftId     String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  nft       NFT      @relation(fields: [nftId], references: [id])

  Post Post[]
}

model Comment {
  id        String   @id @unique
  postId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Follow {
  id          String   @id @unique
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  follower    User     @relation("Follows", fields: [followerId], references: [id])
  following   User     @relation("Followers", fields: [followingId], references: [id])
}

model Message {
  id         String   @id @unique @default(uuid())
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model FileEntity {
  id          String   @id @unique
  fileName    String
  s3Path      String?
  ipfsPath    String?
  mimeType    String
  size        Int
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Photo       Photo[]
}

model Collection {
  id          String   @id @unique
  name        String
  address     String   @unique
  supply      Int
  avatarId    String?  @unique
  bannerId    String?  @unique
  desc        String?
  website     String?
  twitter     String?
  discord     String?
  creatorId   String
  verified    Boolean  @default(false)
  feature     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creator     User     @relation(fields: [creatorId], references: [id])
  avatar      Photo?   @relation("avatar", fields: [avatarId], references: [id])
  banner      Photo?   @relation("banner", fields: [bannerId], references: [id])
  nfts        NFT[]
  stats       Stat[]
}

model NFT {
  id           String     @id @unique
  ownerId      String
  minterId     String
  collectionId String
  tokenAddress String
  tokenId      String // #id value in nft name
  tokenUri     String
  name         String
  image        String
  attributes   Json
  royalty      Int // permyriad value
  NftStatus    NftStatus
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  collection   Collection @relation(fields: [collectionId], references: [id])
  listing      Listing[]
  offers       Offer[]
  owner        User       @relation("owner", fields: [ownerId], references: [id])
  minter       User       @relation("minter", fields: [minterId], references: [id])
  activities   Activity[]
  hides        Hide[]
  likes        Like[]
  event        Event[]

  EventParticipation EventParticipation[]
}

model Listing {
  id        String        @id @unique
  nftId     String
  sellerId  String
  price     BigInt
  startTime DateTime
  endTime   DateTime
  expiresAt DateTime?
  signature String
  status    ListingStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  seller    User          @relation(fields: [sellerId], references: [id])
  nft       NFT           @relation(fields: [nftId], references: [id])
}

model Offer {
  id         String      @id @unique
  nftId      String
  sellerId   String
  buyerId    String
  offerPrice BigInt
  signature  String
  parameters String
  status     OfferStatus
  expiresAt  DateTime?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  nft        NFT         @relation(fields: [nftId], references: [id])
  seller     User        @relation("seller", fields: [sellerId], references: [id])
  buyer      User        @relation("buyer", fields: [buyerId], references: [id])
}

model Activity {
  id           String        @id @unique
  nftId        String
  sellerId     String
  buyerId      String?
  price        BigInt
  actionType   ActivityType
  txHash       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  nft          NFT           @relation(fields: [nftId], references: [id])
  seller       User          @relation("seller", fields: [sellerId], references: [id])
  buyer        User?         @relation("buyer", fields: [buyerId], references: [id])
  notification Notification?
}

model Hide {
  id        String   @id @unique
  nftId     String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  nft       NFT      @relation(fields: [nftId], references: [id])
}

model Notification {
  id           String           @id @unique
  userId       String
  type         NotificationType
  description String?
  activityId   String           @unique
  acknowledged Boolean
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  user         User             @relation(fields: [userId], references: [id])
  activity     Activity         @relation(fields: [activityId], references: [id])
}

model Stat {
  id           String     @id @unique
  collectionId String
  owners       Int
  listedItems  Int
  salesItems   Int
  floorPrice   BigInt
  volume       BigInt
  increased    Float      @default(100)
  period       PeriodType
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  collection   Collection @relation(fields: [collectionId], references: [id])
}

model Reward {
  id                  Int      @id @unique
  userId              String
  lastLoginDate       DateTime
  totalLoginDays      Int      @default(0)
  allowedMintsERC4671 Int      @default(0)
  allowedMintsERC721  Int      @default(0)
  allowedJoinEvent    Int      @default(0)
  hasClaimedDay1      Boolean  @default(false)
  hasClaimedDay3      Boolean  @default(false)
  hasClaimedDay7      Boolean  @default(false)
  hasClaimedDay15     Boolean  @default(false)
  hasClaimedDay30     Boolean  @default(false)

  user User @relation(fields: [userId], references: [id])
}

model Event {
  id           String               @id @unique @default(uuid())
  title        String
  description  String?
  status       EventStatus?
  startTime    DateTime
  endTime      DateTime
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  participants EventParticipation[]
  winnerNftId  String? // relation to NFT
  winnerNft    NFT?                 @relation(fields: [winnerNftId], references: [id])
}

model EventParticipation {
  id        String   @id @unique @default(uuid())
  eventId   String
  userId    String
  nftId     String? // NFT submitted for voting
  createdAt DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
  nft   NFT?  @relation(fields: [nftId], references: [id])
}

enum ActivityType {
  MINTED
  LISTED
  UNLISTED
  CHANGE_PRICE
  SOLD
  CREATED_OFFER
  CHANGE_OFFER
  CANCELED_OFFER
  ACCPETED_OFFER
}

enum NotificationType {
  SOLD
  NEW_OFFER
  OFFER_ACCEPTED
  OFFER_REJECTED
  LIKE
  COMMENT
  FOLLOW
  MENTION
}

enum OfferToken {
  OASIS
  INKARA
}

enum ListingStatus {
  ACTIVE
  SOLD
  INACTIVE
}

enum OfferStatus {
  CREATED
  CANCELED
  ACCEPTED
  REJECTED
}

enum NftStatus {
  SALE
  AUCTION
  HOLD
}

enum PeriodType {
  HOUR
  SIX_HOURS
  DAY
  WEEK
  ALL
}

enum EventStatus {
  ONGOING
  FINISHED
  CANCELED
}
